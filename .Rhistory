tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$cancer_factor
fit = rpart(cancer_factor ~ age.group + breast.density + relatives.with.bc + invasive.bc + menopause, data = tr_dat, method="class")
# error on training set
tr_predicted = predict(fit, newdata = tr_dat1, type="class")
err = sum(tr_actual != tr_predicted)/length(tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, newdata = te_dat, type="class")
err = sum(te_actual != te_predicted)/length(te_predicted)
te_errs = c(te_errs, err)
}
par(mar=c(5, 10, 4, 2))
plot(tr_sizes, tr_errs, col="firebrick", type="b", ylim=range(c(te_errs,tr_errs)), ylab="Classification Error", xlab="Training Set Size", main=paste("Learning Curve for features Age Group, Breast Density,", "\nRelatives With Breast Cancer, Invasive Breast Cancer, and Menopause"), cex.main=1)
points(tr_sizes, te_errs, col="blue", type="b")
legend("topright", c("Training Errors", "Testing Errors"), inset=0.05, lty=1, lwd=3, col=c("firebrick", "blue"),cex = 0.75)
fit = rpart(cancer_factor ~ menopause + age.group  + breast.density + race + hispanic + age.first.birth + relatives.with.bc + breast.procedure + last.mammogram + surgical.menopause + hormone.therapy, data = tr_dat, method="class")
prp(fit, extra=106, varlen=-10, main="Classification Tree for Determining Breast Cancer")
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "no cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="blue")
lines(density(as.numeric(predicted[actual == "cancer"])), col="red")
legend(1.2,2.5, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ age.group + menopause + breast.density + relatives.with.bc + invasive.bc, data = tr_dat)
print(fit$tables$menopause)
print(fit$tables$relatives.with.bc)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 4)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Prediction Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ ., data = tr_dat)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
con_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
library(maptree)
library(e1071)
source("lin-regr-util.R")
mammogram = read.table("risk.txt")
names(mammogram) <- c("menopause","age.group","breast.density","race","hispanic","bmi","age.first.birth","relatives.with.bc","breast.procedure","last.mammogram","surgical.menopause","hormone.therapy","invasive.bc","cancer","training","count")
# Converting from numbers to factors
mammogram$age.group = factor(mammogram$age.group, levels = c(1,2,3,4,5,6,7,8,9,10), labels = c("35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84"))
mammogram$race = factor(mammogram$race, levels = c(1,2,3,4,5,9), labels = c("white", "Asian/Pacific Islander","black", "Native American", "other/mixed", "unknown"))
mammogram$bmi = factor(mammogram$bmi, levels = c(1,2,3,4,9), labels = c("10-24.99", "25-29.99", "30-34.99", "35 or more","unknown"))
mammogram$breast.density = factor(mammogram$breast.density, levels = c(1,2,3,4,9), labels = c("fat","scattered", "dense", "extremely dense", "different measurement"))
mammogram$surgical.menopause = factor(mammogram$surgical.menopause, levels = c(0,1,9), labels = c("natural", "surgical","not menopausal"))
mammogram$hormone.therapy = factor(mammogram$hormone.therapy, levels = c(0,1,9), labels = c("no", "yes","not menopausal"))
mammogram$age.first.birth = factor(mammogram$age.first.birth, levels = c(0,1,2,9), labels = c("< 30", ">= 30","nulliparous", "unknown"))
mammogram$cancer_factor = factor(mammogram$cancer, levels = c(0,1), labels = c("no cancer", "cancer"))
paste("Total Number of rows:", nrow(mammogram))
paste("Patients without Cancer:", sum(mammogram$cancer==0))
paste("Patients with Cancer:", sum(mammogram$cancer==1))
paste("Menopause:", sum(mammogram$menopause == 9))
paste("Race:", sum(mammogram$race == "unknown"))
paste("BMI", sum(mammogram$bmi == "unknown"))
paste("Age of First Birth:", sum(mammogram$age.first.birth == "unknown"))
paste("Relatives with Breast Cancer:", sum(mammogram$relatives.with.bc == 9))
paste("Hispanic:", sum(mammogram$hispanic == 9))
paste("Last Mammogram:", sum(mammogram$last.mammogram == 9))
paste("Breast Procedure:", sum(mammogram$breast.procedure == 9))
mammogram$training = NULL
mammogram$count = NULL
mammogram$bmi = NULL
rows = mammogram$hispanic == 9
mammogram = mammogram[!rows, ]
rows = mammogram$relatives.with.bc == 9
mammogram = mammogram[!rows, ]
rows = mammogram$menopause == 9
mammogram = mammogram[!rows, ]
rows = mammogram$last.mammogram == 9
mammogram = mammogram[!rows, ]
rows = mammogram$breast.procedure == 9
mammogram = mammogram[!rows, ]
rows = mammogram$race == "unknown"
mammogram = mammogram[!rows, ]
rows = mammogram$age.first.birth == "unknown"
mammogram = mammogram[!rows, ]
sum(mammogram$menopause == 9)
sum(mammogram$race == "unknown")
sum(mammogram$age.first.birth == "unknown")
sum(mammogram$relatives.with.bc == 9)
sum(mammogram$hispanic == 9)
sum(mammogram$last.mammogram == 9)
sum(mammogram$breast.procedure == 9)
str(mammogram)
paste("Patients without Cancer:", sum(mammogram$cancer==0))
paste("Patients with Cancer:", sum(mammogram$cancer==1))
plot(density(mammogram$hispanic), col="firebrick", main = "Density of Patients with Hispanic decent")
par(mar=c(5, 10, 4, 2))
plot(mammogram$race, col="salmon", main="Race of Patients", horiz = TRUE, las=1)
# count number of yes and no of each table
Invasive.BC = table(mammogram$invasive.bc)
Breast.Procedure = table(mammogram$breast.procedure)
# plot both items side by side in same graph
barplot(cbind(Invasive.BC, Breast.Procedure), main="Patients that have had Invasive Breast Cancer or a Breast Procedure", beside=TRUE, col=c("lightblue", "salmon"), las=1)
ticks<-c(10000,30000,50000,70000)
axis(2,at=ticks,labels=ticks, las=1)
legend("topright", c("NO", "YES"), inset=0.05, fill=c("lightblue", "salmon"))
par(mar=c(5, 10, 4, 2))
plot(mammogram$breast.density, col="salmon", main="Breast Density", horiz = TRUE, las=1)
# have two graphs side by side
par(mfrow=c(1,2))
# range to use for the x limit
range = sort(as.vector(table(mammogram$age.group[mammogram$cancer == 0])), decreasing = TRUE)[1]
# plot patients with cancer
barplot(table(mammogram$age.group[mammogram$cancer == 1]), main = "Patient Age Group with Cancer", col="salmon", xlim=c(1, range), horiz = TRUE,las=1)
# plot patients without cancer
barplot(table(mammogram$age.group[mammogram$cancer == 0]), main = "Patient Age Group with No Cancer", col="light blue", xlim =c(1, range), horiz = TRUE,las=1)
par(mar=c(5, 10, 4, 2))
rows = sample(1:nrow(mammogram), floor(nrow(mammogram)/30))
plot(as.numeric(mammogram$age.first.birth[rows]), col=ifelse(mammogram$cancer==1, "red", ifelse(mammogram$cancer==0, "lightblue", "orange")), pch=20, yaxt="n", ann=FALSE)
axis(2, at=1:3, labels=c("Age < 30", "Age >= 30", "Nulliparous"), las=1)
legend(1500,1.5, c("Cancer", "No Cancer"),col=c("red", "lightblue"), cex = 0.67, pch = 19)
mammogram$cancer = NULL
set.seed(132)
split = split_data(mammogram)
tr_dat = split[[1]]
te_dat = split[[2]]
fit = rpart(cancer_factor ~ age.group + breast.density + relatives.with.bc + invasive.bc + menopause, data = tr_dat, method="class")
prp(fit, extra=106, varlen=-10, main="Classification Tree for Determining Breast Cancer",box.col=c("palegreen")[fit$frame$val])
#summary(fit)
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2.5, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
te_errs = c()
tr_errs = c()
te_actual = te_dat$cancer_factor
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes) {
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$cancer_factor
fit = rpart(cancer_factor ~ age.group + breast.density + relatives.with.bc + invasive.bc + menopause, data = tr_dat, method="class")
# error on training set
tr_predicted = predict(fit, newdata = tr_dat1, type="class")
err = sum(tr_actual != tr_predicted)/length(tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, newdata = te_dat, type="class")
err = sum(te_actual != te_predicted)/length(te_predicted)
te_errs = c(te_errs, err)
}
par(mar=c(5, 10, 4, 2))
plot(tr_sizes, tr_errs, col="firebrick", type="b", ylim=range(c(te_errs,tr_errs)), ylab="Classification Error", xlab="Training Set Size", main=paste("Learning Curve for features Age Group, Breast Density,", "\nRelatives With Breast Cancer, Invasive Breast Cancer, and Menopause"), cex.main=1)
points(tr_sizes, te_errs, col="blue", type="b")
legend("topright", c("Training Errors", "Testing Errors"), inset=0.05, lty=1, lwd=3, col=c("firebrick", "blue"),cex = 0.75)
fit = rpart(cancer_factor ~ menopause + age.group  + breast.density + race + hispanic + age.first.birth + relatives.with.bc + breast.procedure + last.mammogram + surgical.menopause + hormone.therapy, data = tr_dat, method="class")
prp(fit, extra=106, varlen=-10, main="Classification Tree for Determining Breast Cancer")
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "no cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="blue")
lines(density(as.numeric(predicted[actual == "cancer"])), col="red")
legend(1.2,2.5, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ age.group + menopause + breast.density + relatives.with.bc + invasive.bc, data = tr_dat)
print(fit$tables$menopause)
print(fit$tables$relatives.with.bc)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 4)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Prediction Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ ., data = tr_dat)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
con_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ age.group + last.mammogram + age.first.birth + race, data = tr_dat)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
con_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
plot_predict_actual(predicted,actual)
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
plot_predict_actual(as.numeric(predicted),as.numeric(actual))
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
library(maptree)
library(e1071)
source("lin-regr-util.R")
mammogram = read.table("risk.txt")
names(mammogram) <- c("menopause","age.group","breast.density","race","hispanic","bmi","age.first.birth","relatives.with.bc","breast.procedure","last.mammogram","surgical.menopause","hormone.therapy","invasive.bc","cancer","training","count")
# Converting from numbers to factors
mammogram$age.group = factor(mammogram$age.group, levels = c(1,2,3,4,5,6,7,8,9,10), labels = c("35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84"))
mammogram$race = factor(mammogram$race, levels = c(1,2,3,4,5,9), labels = c("white", "Asian/Pacific Islander","black", "Native American", "other/mixed", "unknown"))
mammogram$bmi = factor(mammogram$bmi, levels = c(1,2,3,4,9), labels = c("10-24.99", "25-29.99", "30-34.99", "35 or more","unknown"))
mammogram$breast.density = factor(mammogram$breast.density, levels = c(1,2,3,4,9), labels = c("fat","scattered", "dense", "extremely dense", "different measurement"))
mammogram$surgical.menopause = factor(mammogram$surgical.menopause, levels = c(0,1,9), labels = c("natural", "surgical","not menopausal"))
mammogram$hormone.therapy = factor(mammogram$hormone.therapy, levels = c(0,1,9), labels = c("no", "yes","not menopausal"))
mammogram$age.first.birth = factor(mammogram$age.first.birth, levels = c(0,1,2,9), labels = c("< 30", ">= 30","nulliparous", "unknown"))
mammogram$cancer_factor = factor(mammogram$cancer, levels = c(0,1), labels = c("no cancer", "cancer"))
paste("Total Number of rows:", nrow(mammogram))
paste("Patients without Cancer:", sum(mammogram$cancer==0))
paste("Patients with Cancer:", sum(mammogram$cancer==1))
paste("Menopause:", sum(mammogram$menopause == 9))
paste("Race:", sum(mammogram$race == "unknown"))
paste("BMI", sum(mammogram$bmi == "unknown"))
paste("Age of First Birth:", sum(mammogram$age.first.birth == "unknown"))
paste("Relatives with Breast Cancer:", sum(mammogram$relatives.with.bc == 9))
paste("Hispanic:", sum(mammogram$hispanic == 9))
paste("Last Mammogram:", sum(mammogram$last.mammogram == 9))
paste("Breast Procedure:", sum(mammogram$breast.procedure == 9))
mammogram$training = NULL
mammogram$count = NULL
mammogram$bmi = NULL
rows = mammogram$hispanic == 9
mammogram = mammogram[!rows, ]
rows = mammogram$relatives.with.bc == 9
mammogram = mammogram[!rows, ]
rows = mammogram$menopause == 9
mammogram = mammogram[!rows, ]
rows = mammogram$last.mammogram == 9
mammogram = mammogram[!rows, ]
rows = mammogram$breast.procedure == 9
mammogram = mammogram[!rows, ]
rows = mammogram$race == "unknown"
mammogram = mammogram[!rows, ]
rows = mammogram$age.first.birth == "unknown"
mammogram = mammogram[!rows, ]
sum(mammogram$menopause == 9)
sum(mammogram$race == "unknown")
sum(mammogram$age.first.birth == "unknown")
sum(mammogram$relatives.with.bc == 9)
sum(mammogram$hispanic == 9)
sum(mammogram$last.mammogram == 9)
sum(mammogram$breast.procedure == 9)
str(mammogram)
paste("Patients without Cancer:", sum(mammogram$cancer==0))
paste("Patients with Cancer:", sum(mammogram$cancer==1))
plot(density(mammogram$hispanic), col="firebrick", main = "Density of Patients with Hispanic decent")
par(mar=c(5, 10, 4, 2))
plot(mammogram$race, col="salmon", main="Race of Patients", horiz = TRUE, las=1)
# count number of yes and no of each table
Invasive.BC = table(mammogram$invasive.bc)
Breast.Procedure = table(mammogram$breast.procedure)
# plot both items side by side in same graph
barplot(cbind(Invasive.BC, Breast.Procedure), main="Patients that have had Invasive Breast Cancer or a Breast Procedure", beside=TRUE, col=c("lightblue", "salmon"), las=1)
ticks<-c(10000,30000,50000,70000)
axis(2,at=ticks,labels=ticks, las=1)
legend("topright", c("NO", "YES"), inset=0.05, fill=c("lightblue", "salmon"))
par(mar=c(5, 10, 4, 2))
plot(mammogram$breast.density, col="salmon", main="Breast Density", horiz = TRUE, las=1)
# have two graphs side by side
par(mfrow=c(1,2))
# range to use for the x limit
range = sort(as.vector(table(mammogram$age.group[mammogram$cancer == 0])), decreasing = TRUE)[1]
# plot patients with cancer
barplot(table(mammogram$age.group[mammogram$cancer == 1]), main = "Patient Age Group with Cancer", col="salmon", xlim=c(1, range), horiz = TRUE,las=1)
# plot patients without cancer
barplot(table(mammogram$age.group[mammogram$cancer == 0]), main = "Patient Age Group with No Cancer", col="light blue", xlim =c(1, range), horiz = TRUE,las=1)
par(mar=c(5, 10, 4, 2))
rows = sample(1:nrow(mammogram), floor(nrow(mammogram)/30))
plot(as.numeric(mammogram$age.first.birth[rows]), col=ifelse(mammogram$cancer==1, "red", ifelse(mammogram$cancer==0, "lightblue", "orange")), pch=20, yaxt="n", ann=FALSE)
axis(2, at=1:3, labels=c("Age < 30", "Age >= 30", "Nulliparous"), las=1)
legend(1500,1.5, c("Cancer", "No Cancer"),col=c("red", "lightblue"), cex = 0.67, pch = 19)
mammogram$cancer = NULL
set.seed(132)
split = split_data(mammogram)
tr_dat = split[[1]]
te_dat = split[[2]]
fit = rpart(cancer_factor ~ age.group + breast.density + relatives.with.bc + invasive.bc + menopause, data = tr_dat, method="class")
prp(fit, extra=106, varlen=-10, main="Classification Tree for Determining Breast Cancer",box.col=c("palegreen")[fit$frame$val])
#summary(fit)
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2.5, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
te_errs = c()
tr_errs = c()
te_actual = te_dat$cancer_factor
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes) {
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$cancer_factor
fit = rpart(cancer_factor ~ age.group + breast.density + relatives.with.bc + invasive.bc + menopause, data = tr_dat, method="class")
# error on training set
tr_predicted = predict(fit, newdata = tr_dat1, type="class")
err = sum(tr_actual != tr_predicted)/length(tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, newdata = te_dat, type="class")
err = sum(te_actual != te_predicted)/length(te_predicted)
te_errs = c(te_errs, err)
}
par(mar=c(5, 10, 4, 2))
plot(tr_sizes, tr_errs, col="firebrick", type="b", ylim=range(c(te_errs,tr_errs)), ylab="Classification Error", xlab="Training Set Size", main=paste("Learning Curve for features Age Group, Breast Density,", "\nRelatives With Breast Cancer, Invasive Breast Cancer, and Menopause"), cex.main=1)
points(tr_sizes, te_errs, col="blue", type="b")
legend("topright", c("Training Errors", "Testing Errors"), inset=0.05, lty=1, lwd=3, col=c("firebrick", "blue"),cex = 0.75)
fit = rpart(cancer_factor ~ menopause + age.group  + breast.density + race + hispanic + age.first.birth + relatives.with.bc + breast.procedure + last.mammogram + surgical.menopause + hormone.therapy, data = tr_dat, method="class")
prp(fit, extra=106, varlen=-10, main="Classification Tree for Determining Breast Cancer")
predicted = predict(fit, newdata = te_dat, type="class")
actual = te_dat$cancer_factor
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "no cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="blue")
lines(density(as.numeric(predicted[actual == "cancer"])), col="red")
legend(1.2,2.5, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ age.group + menopause + breast.density + relatives.with.bc + invasive.bc, data = tr_dat)
print(fit$tables$menopause)
print(fit$tables$relatives.with.bc)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
confusion_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 4)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Prediction Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ ., data = tr_dat)
print(fit$tables$invasive.bc)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
con_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
plot(density(as.numeric(predicted[actual == "cancer"])), main = "Double Density Plot", xlab="Decision Tree Output", col="red", ylim=range(0:3))
lines(density(as.numeric(predicted[actual == "no cancer"])), col="blue")
legend(1.3,2, c("Cancer", "No Cancer"),col=c("red", "blue"), inset=0.05, lty=1, lwd=3)
fit = naiveBayes(cancer_factor ~ age.group + last.mammogram + age.first.birth + race, data = tr_dat)
actual = te_dat$cancer_factor
predicted = predict(fit, newdata = te_dat)
con_matrix = table(actual, predicted)
TN = confusion_matrix[1,1]
FN = confusion_matrix[2,1]
FP = confusion_matrix[1,2]
TP = confusion_matrix[2,2]
confusion_matrix
accuracy = mean(predicted == actual)
round(accuracy, 3)
# precision = true positives / (true positives + false positives)
precision = TP/(TP+FP)
# recall =  true positives/ (true positives + false negatives)
recall = TP/(TP + FN)
paste("precision:", round(precision, 3))
paste("recall:", round(recall, 3))
